---
- name: Deploy instance from Marketplace
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    region: "us-east-1"
    key_pair: "Idan.east.new"
    vpc_subnet_ids:
      - subnet: "subnet-0b67ec48b2a37de38"
    vpc_id: "vpc-0d6c6685b7aaeca47"
    marketplace_image: "ami-01bb8c8dc94f25ded"
    instance_type: "m5.2xlarge"
    security_group_name: "AviControllerSG"
    disk_size_gb: "250"
    disk_type: "gp3"
    iam_role: "AviController-Refined-Role"
    tags:
      Name: "AviControllerNew"
      shutdown_policy: "noshut"
      Dept: "fse-amers"
      Owner: "idan.ayalon@broadcom.com"
  tasks:
    - name: Include AWS credentials
      include_vars:
        file: "aws_credentials.yml"

    - name: Create a security group allowing ports 80, 443, 8443, 123, and 22
      amazon.aws.ec2_security_group:
        name: "{{ security_group_name }}"
        description: "Allow Avi Controller Default Ports"
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8443
            to_port: 8443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 123
            to_port: 123
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Launch an instance from the Marketplace
      with_items: "{{ vpc_subnet_ids }}"
      amazon.aws.ec2_instance:
        key_name: "{{ key_pair }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ item.subnet }}"
        network:
          assign_public_ip: true
        instance_type: "{{ instance_type }}"
        image_id: "{{ marketplace_image }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        wait: true
        security_group: "{{ security_group.group_id }}"
        termination_protection: false
        count: 1
        iam_instance_profile: "{{ iam_role }}"
        tags: "{{ tags }}"
        volumes:
          - device_name: "/dev/sda1"
            ebs:
              volume_size: "{{ disk_size_gb }}"
              volume_type: "{{ disk_type }}"
              delete_on_termination: true
      register: ec2_instances

#    - name: Debug ec2_instances
#      debug:
#        var: ec2_instances

    - name: Add instances to hosts group
      add_host:
        hostname: "{{ item.instances[0].public_ip_address }}"
        ansible_ssh_private_key_file: "/Users/iayalon/.ssh/idan.east.new.pem"
        ansible_user: ec2-user  # or any other user depending on the AMI
        ansible_python_interpreter: /usr/bin/python3  # Path to Python interpreter on the instance
        group: launched
      with_items: "{{ ec2_instances.results }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.instances[0].public_ip_address }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      with_items: "{{ ec2_instances.results }}"

    - name: SSH into each instance and run command
      wait_for:
        delay: 600
      command: ssh -o StrictHostKeyChecking=no -i /Users/iayalon/.ssh/idan.east.new.pem admin@{{ item.instances[0].public_ip_address }} "sudo /opt/avi/scripts/initialize_admin_user.py --password Avi123$%^"
      with_items: "{{ ec2_instances.results }}"

    - name: Print public IP addresses of deployed instances
      debug:
        msg: "Instance {{ item.item }} - Public IP: {{ item.instances[0].public_ip_address }}"
      with_items: "{{ ec2_instances.results }}"
